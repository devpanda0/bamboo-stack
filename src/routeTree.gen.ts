/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'
import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CpAppRouteImport } from './routes/cp._app'
import { Route as AuthSignInRouteImport } from './routes/auth/sign-in'
import { Route as CpAppIndexRouteImport } from './routes/cp/_app/index'
import { Route as CpAppUsersRouteImport } from './routes/cp/_app/users'
import { ServerRoute as ApiTrpcSplatServerRouteImport } from './routes/api/trpc.$'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth.$'

const CpRouteImport = createFileRoute('/cp')()
const rootServerRouteImport = createServerRootRoute()

const CpRoute = CpRouteImport.update({
  id: '/cp',
  path: '/cp',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CpAppRoute = CpAppRouteImport.update({
  id: '/_app',
  getParentRoute: () => CpRoute,
} as any)
const AuthSignInRoute = AuthSignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => AuthRoute,
} as any)
const CpAppIndexRoute = CpAppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => CpAppRoute,
} as any)
const CpAppUsersRoute = CpAppUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => CpAppRoute,
} as any)
const ApiTrpcSplatServerRoute = ApiTrpcSplatServerRouteImport.update({
  id: '/api/trpc/$',
  path: '/api/trpc/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteWithChildren
  '/auth/sign-in': typeof AuthSignInRoute
  '/cp': typeof CpAppRouteWithChildren
  '/cp/users': typeof CpAppUsersRoute
  '/cp/': typeof CpAppIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteWithChildren
  '/auth/sign-in': typeof AuthSignInRoute
  '/cp': typeof CpAppIndexRoute
  '/cp/users': typeof CpAppUsersRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteWithChildren
  '/auth/sign-in': typeof AuthSignInRoute
  '/cp': typeof CpRouteWithChildren
  '/cp/_app': typeof CpAppRouteWithChildren
  '/cp/_app/users': typeof CpAppUsersRoute
  '/cp/_app/': typeof CpAppIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/auth' | '/auth/sign-in' | '/cp' | '/cp/users' | '/cp/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/auth' | '/auth/sign-in' | '/cp' | '/cp/users'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/auth/sign-in'
    | '/cp'
    | '/cp/_app'
    | '/cp/_app/users'
    | '/cp/_app/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  CpRoute: typeof CpRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$' | '/api/trpc/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$' | '/api/trpc/$'
  id: '__root__' | '/api/auth/$' | '/api/trpc/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
  ApiTrpcSplatServerRoute: typeof ApiTrpcSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/cp': {
      id: '/cp'
      path: '/cp'
      fullPath: '/cp'
      preLoaderRoute: typeof CpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cp/_app': {
      id: '/cp/_app'
      path: '/cp'
      fullPath: '/cp'
      preLoaderRoute: typeof CpAppRouteImport
      parentRoute: typeof CpRoute
    }
    '/auth/sign-in': {
      id: '/auth/sign-in'
      path: '/sign-in'
      fullPath: '/auth/sign-in'
      preLoaderRoute: typeof AuthSignInRouteImport
      parentRoute: typeof AuthRoute
    }
    '/cp/_app/': {
      id: '/cp/_app/'
      path: '/'
      fullPath: '/cp/'
      preLoaderRoute: typeof CpAppIndexRouteImport
      parentRoute: typeof CpAppRoute
    }
    '/cp/_app/users': {
      id: '/cp/_app/users'
      path: '/users'
      fullPath: '/cp/users'
      preLoaderRoute: typeof CpAppUsersRouteImport
      parentRoute: typeof CpAppRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/trpc/$': {
      id: '/api/trpc/$'
      path: '/api/trpc/$'
      fullPath: '/api/trpc/$'
      preLoaderRoute: typeof ApiTrpcSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AuthRouteChildren {
  AuthSignInRoute: typeof AuthSignInRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthSignInRoute: AuthSignInRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface CpAppRouteChildren {
  CpAppUsersRoute: typeof CpAppUsersRoute
  CpAppIndexRoute: typeof CpAppIndexRoute
}

const CpAppRouteChildren: CpAppRouteChildren = {
  CpAppUsersRoute: CpAppUsersRoute,
  CpAppIndexRoute: CpAppIndexRoute,
}

const CpAppRouteWithChildren = CpAppRoute._addFileChildren(CpAppRouteChildren)

interface CpRouteChildren {
  CpAppRoute: typeof CpAppRouteWithChildren
}

const CpRouteChildren: CpRouteChildren = {
  CpAppRoute: CpAppRouteWithChildren,
}

const CpRouteWithChildren = CpRoute._addFileChildren(CpRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  CpRoute: CpRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiTrpcSplatServerRoute: ApiTrpcSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
